const long long N = 2e5 + 5, oo = 1e18;
vector<pair<long long, long long>> adj[N];
long long dist[N];
long long parent[N];
long long n, m;

void dijkstra(long long src)
{
    for (long long i = 1; i <= n; ++i) dist[i] = oo;
    dist[src] = 0;
    parent[src] = src;

    priority_queue<pair<long long, long long>> pq;
    pq.push({0, src});

    while (!pq.empty())
    {
        long long u = pq.top().second;
        long long cost = -pq.top().first;
        pq.pop();

        if(dist[u] < cost) continue;

        for(auto [v, w] : adj[u])
        {
            if(dist[v] > dist[u] + w)
            {
                dist[v] = dist[u] + w;
                parent[v] = u;
                pq.push({-dist[v], v});
            }
        }
    }
}