
 1)number of subsets included empty char "order not important"  -> 2^n

 2)number of subsquence of lenght "k" in string of lenght "n" == n - k + 1

 3) What is the sum of this sequence: {4, 10, 16, 22, 28, 34, 40} = ((firstNumber + lastNumber) / 2 ) *  numberOfNumbers  = 154 

 4)What is the sum of this geometric series: 1 3 9 27 81 243 729 : frist_number * (base ^numberofnumbers - 1) / base - 1 = 1 * (3^7 - 1) / 3 - 1 =1093 
 
******************************************************************************************************************************************************

 5) to calculate number of integer point on a circle of radius "r" use :
                                                                     i=r-1
                                                        4 * r + 1 + 4 *( sum  {r*r - i*i})
                                                                      i=0
                                                                      
6) ceil ( sqrt(8 * n + 1) -1) /2) : to get number of row of the number n in this traingle   1                                                                                                                                                         this isn't Pascal's triangle                                                               2 3
                                                                                          4 5 6 
                                                                                         7 8 9 10 
                                                                                        . . . . . . 
        Pascal's triangle link "https://www.mathsisfun.com/pascals-triangle.html"                                                                       
     
 ***************************************************************************************************************************************************      
7)combination && permutation   link "https://www.mathsisfun.com/combinatorics/combinations-permutations.html"

    nCr = n! / (r! * (n-r)! ) ; -> select         where n is the number of things to choose from,
                                                        and we choose r of them,
                                                        no repetition,
                                                        order doesn't matter.
    
    nPr = n! / (n-r)!         ; -> arrange    where n is the number of things to choose from,
                                                  and we choose r of them,
                                                    no repetitions,
                                                    order matters.
                                                    
    
                                           
                                               
    
    or  means "+"
    and means "*"  
    
    nCr code : 
                   long long nCr(long long N, long long r)
                            {
                                long long res = 0;
                                if (r == 0) {
                                    return 1;
                                }
                                else {
                                    res = nCr(N, r - 1)
                                        * (N - r + 1) / r;
                                }
                                return res;
                            }
                            

 8) ax^2 + bx + c =0    : 
                          r = { -b +/- squr(b^2 - 4ac) } / 2a
                          
***************************************************************************************************************************************** 

 9)(Area of the polygon P) = I(P) + 1/2 * B(P) - 1
       I(P) is the number of interior lattice points of the polygon
       B(P) is the number of lattice points on the boundary of the polygon
  
 **********************************************************************************************************************************      
 10) code to get number of all positive divisor of number "n" 
 
 ll arr[1000001] ={0};
    void all_divisor()
        {
      for (int i = 1;i <= 1000000;i++)
          {
           for (int j = i;j <= 1000000;j += i)
              arr[j]++;
          }
    }
*****************************************************************************************************************************************    

 11) if i have a polygon's side's lenght "s" and number of vertices "v" and i want calculte lengh of radius of the circle 
     which pass throgh all vertices لاي مضلع منتظم
     
     r -> is half of diameter
     
     r = s / (2 * sin(PI / v))
     
 *********************************************************************************************************************************************
 
 12)find all prime number less than 1e8  by sieve                  O( n*log(log(n)) )
  bool v[99998955]; 
   v[0]=1;              // if v[i] == 1 then it isn't prime
    v[1]=1;
    vector<int>primes;
    for(int i=2 ; i*i<=99998955 ; i++)
    {
        if(v[i] == 0)
        {
            for(int j=2 ; i*j<=99998955; j++)
            {
                v[i*j]=1;
            }
        }
    }
    
    ------------------------------------
    vector<bool> prime_range_sieve(ll num) {
 
    vector<bool> primes(num + 1, true);
    primes[0] = primes[1] = false;
 
    for (ll i = 2; i * i <= num; i++) {
        for (ll j = i * i; primes[i] && j <= num; j += i) {
            primes[j] = false;
        }
    }
 
    return primes;
}

-------------------------------------------
vb prime_range_linear_sieve(ll num) {
 
    vl primes;
    vb is_prime(num + 1, true);
 
    is_prime[0] = is_prime[1] = false;
 
    for (ll i = 2; i <= num; i++) {
        if(is_prime[i]) primes.push_back(i);
        for (ll j = 0;j < primes.size() && i * primes[j] <= num ; j ++) {
            is_prime[i * primes[j]] = false;
            if(i % primes[j] == 0) break;
        }
    }
 
    return is_prime;
}
    -------------------------------------
    vb prime_range_segmented_sieve(ll l, ll r){
    vl primes;
    ll num = sqrt(r);
    vb is_prime(num + 1, true);


    is_prime[0] = is_prime[1] = false;
    for (ll i = 2; i <= num; i++) {
        if(is_prime[i]) primes.push_back(i);
        for (ll j = 0;j < primes.size() && i * primes[j] <= num ; j ++) {
            is_prime[i * primes[j]] = false;
            if(i % primes[j] == 0) break;
        }
    }

    is_prime.clear();
    is_prime.resize(r - l + 1, true);

    if(l <= 1) is_prime[0] = 0;

    for(ll i : primes){
        for(ll j = max(i * i, (l + i - 1)/i * i); j <= r; j += i){
            is_prime[j - l] = false;
        }
    }

    return is_prime;
}
     --------------------------------------
     
     
******************************************************************************************************************************

13)modular arthimatic
 
 ->(a+b)%c == ( a%c + b%c ) % c;
 ->(a*b)%c == ( a%c * b%c ) % c;
 
 ->(a-b)%c == ( (a%c) - (b%c) + c ) % c;
 ->(a/b)%c == ( a%c * (b^-1)%c ) % c;
 
 *******************************************************************************************************************************
 
 14)
 ull binary_exponentiation(ull base ,ull power)
{
    ull result=1;
    while(power>0)
    {
        if(power & 1)
        {
            result *= base;
        }
        base *= base;
        power /= 2;
    }
    return result;
}

*****************************************************************************************************

 15)GCD (greatest common divisor) minmum repitation of prime factors
ull gcd(ull a, ull b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
////////////////////////////
int findGCD(int arr[], int n)
{
    int result = arr[0];
    for (int i = 1; i < n; i++)
    {
        result = gcd(arr[i], result);

        if(result == 1)
        {
            return 1;
        }
    }
    return result;
}

*************************************************************************

16)LCM (least common multiple) -> maximum repitation of prime factors
    
    LCM(a,b) = (a*b) / GCD(a,b) == a / GCD(a,b) * b
    
    **********
    
    ll LCM(ll a, ll b) {
    ll maximum = max(a, b);
    ll minimum = min(a, b);
    ll add_n = maximum;
 
    for (; maximum % minimum; maximum += add_n);
    return maximum;
}

    
****************************************************************

17) 

  ll fastpow(ll a, ll b, ll m){ // a^b
    if(b == 0) return 1;
    if(b & 1) return (a % m) * (fastpow((a % m) * (a % m) % m,b/2,m) % m) % m ;
    return fastpow((a % m) * (a % m) % m,b/2, m);
}




